generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("UWAJUDGE_DATABASE_URL")
}


model User {
  id                  Int                     @id @default(autoincrement())
  email               String?
  username            String?                 @unique
  password            String?
  AdminsOnAssignments AdminsOnAssignments[]
  externalAccounts    ExternalAccount[]
  assignments         StudentsOnAssignments[]
  Submission          Submission[]
  TutorsOnAssignments TutorsOnAssignments[]
  permissions         Permission[]            @relation("PermissionToUser")
}

model ExternalAccount {
  id         Int             @id @default(autoincrement())
  userId     Int
  provider   String
  providerId String
  user       User            @relation(fields: [userId], references: [id])

  @@unique([provider, userId])
  @@unique([provider, providerId])
  @@index([userId], map: "ExternalAccount_userId_fkey")
}

model Permission {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  users       User[]      @relation("PermissionToUser")
  userGroups  UserGroup[] @relation("PermissionToUserGroup")
}

model UserGroup {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  permissions Permission[] @relation("PermissionToUserGroup")
}

model Assignment {
  id          Int                     @id @default(autoincrement())
  title       String
  description String?
  publishDate DateTime?
  dueDate     DateTime?
  admins      AdminsOnAssignments[]
  problems    ProblemsOnAssignments[]
  students    StudentsOnAssignments[]
  Submission  Submission[]
  tutors      TutorsOnAssignments[]
  clarifications Clarification[] 
}

model AdminsOnAssignments {
  assignmentId Int
  userId       Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([assignmentId, userId])
  @@index([userId], map: "AdminsOnAssignments_userId_fkey")
}

model TutorsOnAssignments {
  assignmentId Int
  userId       Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([assignmentId, userId])
  @@index([userId], map: "TutorsOnAssignments_userId_fkey")
}

model StudentsOnAssignments {
  assignmentId Int
  userId       Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([assignmentId, userId])
  @@index([userId], map: "StudentsOnAssignments_userId_fkey")
}

model Problem {
  id          String                  @id
  name        String
  description String?
  assignments ProblemsOnAssignments[]
  Submission  Submission[]
}

model ProblemsOnAssignments {
  problemId    String
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  problem      Problem    @relation(fields: [problemId], references: [id])

  @@id([problemId, assignmentId])
  @@index([assignmentId], map: "ProblemsOnAssignments_assignmentId_fkey")
}

model Submission {
  id             String      @id @db.VarChar(255)
  submissionDate DateTime
  assignmentId   Int
  problemId      String      @db.VarChar(255)
  userId         Int
  comment        String?
  Assignment     Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_assignment_submission")
  Problem        Problem?    @relation(fields: [problemId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_problem_submission")
  User           User?       @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_user_submission")

  @@index([assignmentId], map: "fk_assignment_submission")
  @@index([problemId], map: "fk_problem_submission")
  @@index([userId], map: "fk_user_submission")

  
  
}
model Clarification {
  id           Int       @id @default(autoincrement())
  text         String    // 澄清的文本内容
  assignmentId Int       // 外键，引用 Assignment 模型的 id
  assignment   Assignment @relation(fields: [assignmentId], references: [id]) // 外键关系

  @@index([assignmentId]) // 为外键字段创建索引
}


